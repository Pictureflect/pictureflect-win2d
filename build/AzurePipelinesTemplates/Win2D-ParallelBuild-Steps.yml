parameters:
  BuildTests: false
  RunTests: false
  BuildDocs: false
  BuildTools: false
  SignCode: false
  PublishBinaries: false
  PipelineType: ''

steps:
# Release Policy Checks
- ${{ if eq(parameters.PipelineType, 'Release') }}:
  # Run PoliCheck
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@2
    displayName: 'Run PoliCheck'
    inputs:
      inputType: CmdLine
      cmdLineArgs: '/F:$(Build.SourcesDirectory) /O:$(Build.SourcesDirectory)\bin\PoliCheck.xml /T:9 /SEV:"1|2|3|4" /SOM'
      SOMEnabled: true
      optionsFC: 1
      optionsXS: 1
      optionsSEV: '1|2|3|4'
      optionsWORKINGDIRECTORY: '$(Build.SourcesDirectory)'
  # Build PoliCheck Output Parser
  - task: MSBuild@1
    displayName: 'Build PoliCheckOutputParser'
    inputs:
      solution: 'build\pkges\PoliCheckOutputParser\PoliCheckOutputParser.csproj'
      platform: AnyCPU
      configuration: Release
  # Run PoliCheck Output Parser
  - task: CmdLine@2
    displayName: 'Run PoliCheckOutputParser'
    inputs:
      script: call build\pkges\PoliCheckOutputParser\bin\Release\PoliCheckOutputParser.exe $(Build.SourcesDirectory) ..\.gdn\.r\policheck\001\policheck.xml build\pkges\PoliCheckExclusions.txt bin\PoliCheck.txt

# CI Policy Checks
- ${{ if ne(parameters.PipelineType, 'Release') }}:
  # Ensure that release branch was not merged back into master
  - task: CmdLine@2
    displayName: Ensure release branch not merged to master
    inputs:
      script: |
        if exist $(Build.SourcesDirectory)\build\pkges\PoliCheckExclusions.txt exit 1

# Set the build number and version
- template: Win2D-VersionNumber.yml
  parameters:
    PipelineType: ${{ parameters.PipelineType }}

# Download nuget.exe
- script : call build\nuget\download-nuget.cmd
  displayName: Download Nuget

# Nuget Authenticate
- task: NuGetAuthenticate@1
  displayName: NuGet Authenticate Win2DWinUI
  inputs:
    nuGetServiceConnections: Win2DWinUI
- task: NuGetAuthenticate@1
  displayName: NuGet Authenticate ProjectReunion.nuget.internal
  inputs:
    nuGetServiceConnections: ProjectReunion.nuget.internal
    
# Nuget restore
- task: PowerShell@2
  displayName: 'Nuget Restore'
  env:
    REUNION_FEED_PAT: $(REUNION_FEED_PAT)
    WIN2D_FEED_PAT: $(WIN2D_FEED_PAT)
    WIN2D_AZURE_NUGET_FEED: $(WIN2D_AZURE_NUGET_FEED)
  inputs:
    targetType: inline
    script: |
      # Set the appropriate nuget config, using the private ADO secure feed rather than the public feed used by the VS solution
      $nugetConfig = "\build\nuget\azure_pipelines_nuget.config"

      # Enter VS Shell
      $env:_MSBDIR="C:\Program Files\Microsoft Visual Studio\2022\Enterprise\"
      .$env:Build_SourcesDirectory\build\Enter-VSShell.ps1 -vsPath $env:_MSBDIR
      $env:PATH="$env:Build_SourcesDirectory\build\nuget;$env:PATH"

      # Nuget Restore
      .$env:Build_SourcesDirectory\build\nuget\nuget.exe restore ($env:Build_SourcesDirectory + "\build\pkges\packages.config") -PackagesDirectory ($env:Build_SourcesDirectory + "\packages") -configFile ($env:Build_SourcesDirectory + $nugetConfig) -NonInteractive

      # Nuget Restore for AnyCPU projects
      $env:Platform="AnyCPU"
      $env:Configuration="Release"
      .$env:Build_SourcesDirectory\build\nuget\nuget.exe restore .\Win2D.uap.sln -PackagesDirectory ($env:Build_SourcesDirectory + "\packages") -configFile ($env:Build_SourcesDirectory + $nugetConfig) -NonInteractive
      rm env:Configuration
      rm env:Platform
    
# Nuget Restore for telemetry
- task: CmdLine@2
  displayName: Move telemetry files
  inputs:
    script: |
      call nuget.exe restore -NonInteractive -configFile $(Build.SourcesDirectory)/release-nuget.config -PackagesDirectory $(Build.SourcesDirectory)/packages $(Build.SourcesDirectory)/build/release-pkges/packages.config || exit /b 1
      del $(Build.SourcesDirectory)\\winrt\\inc\\MicrosoftTelemetry.h || exit /b 1
      move /Y $(Build.SourcesDirectory)\\packages\\Microsoft.Win2D.Telemetry.1.0.2\\build\\include\\MicrosoftTelemetry.h $(Build.SourcesDirectory)\\winrt\\inc\\MicrosoftTelemetry.h || exit /b 1

# Build Win2D
- task: MSBuild@1
  displayName: Build Win2D.proj
  inputs:
    solution: Win2D.proj
    msbuildVersion: 17.0
    msbuildArguments: /p:BuildTests=${{ parameters.BuildTests }} /p:BuildDocs=${{ parameters.BuildDocs }} /p:BuildTools=${{ parameters.BuildTools }} /p:RunTests=false /p:BuildPlatforms="$(architecture)" /p:BuildConfigurations="$(buildConfiguration)"
    maximumCpuCount: true

# Build Intellisense
- task: MSBuild@1
  displayName: Build Intellisense
  condition: and(succeeded(), eq(variables.architecture, 'Win32;AnyCPU') )
  inputs:
    solution: tools\docs\BuildDocs.proj
    msbuildVersion: 17.0
    msbuildArguments: /nologo /v:m /p:IntellisenseOnly=true
    maximumCpuCount: true

# Signing and Release checks: BinSkim, Post Analysis, and ComponentDetection
- ${{ if eq(parameters.PipelineType, 'Release') }}:
  # BinSkim
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@3
    displayName: 'Run BinSkim '
    inputs:
      InputType: Basic
      AnalyzeTarget: 'bin\$(archDirectory)\release\winrt.dll.uap\Microsoft.Graphics.Canvas.dll'
      AnalyzeConfigPath: '"build\pkges\BinSkimConfig.xml"'
      AnalyzeVerbose: true
      toolVersion: LatestPreRelease
  # Post Analysis
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
    displayName: 'Post Analysis'
    inputs:
      BinSkim: true
      BinSkimBreakOn: WarningAbove
  # Component Gonvernance Detection
  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    # Sign Binaries
  - task: onebranch.pipeline.signing@1
    displayName: 'CodeSign'
    condition: eq(${{ parameters.SignCode }}, 'true')
    inputs:
      command: sign
      signing_profile: external_distribution
      files_to_sign: |
        **\Microsoft.Graphics.Canvas.dll;
        **\Microsoft.Graphics.Canvas.winmd;
        **\Microsoft.Graphics.Canvas.Interop.dll;
      search_root: $(Build.SourcesDirectory)\bin\
    
# Run Tests
- ${{ if eq(parameters.RunTests, true) }}:
  - task: PowerShell@2
    displayName: Install Test AppX
    inputs:
      targetType: 'inline'
      script: |
        Import-Certificate -FilePath $(Build.SourcesDirectory)\bin\$(archDirectory)\$(buildConfiguration)\winrt.test.managed.uap\AppPackages\winrt.test.managed.uap_1.0.0.0_$(architecture)_Test\winrt.test.managed.uap_1.0.0.0_$(architecture).cer -CertStoreLocation Cert:\LocalMachine\Root\
        Import-Certificate -FilePath $(Build.SourcesDirectory)\bin\$(archDirectory)\$(buildConfiguration)\winrt.test.external.uap\AppPackages\winrt.test.external.uap_1.0.0.0_$(architecture)_Test\winrt.test.external.uap_1.0.0.0_$(architecture).cer -CertStoreLocation Cert:\LocalMachine\Root\
        # $(Build.SourcesDirectory)\bin\$(archDirectory)\$(buildConfiguration)\winrt.test.managed.uap\AppPackages\winrt.test.managed.uap_1.0.0.0_$(architecture)_Test\Install.ps1
        # $(Build.SourcesDirectory)\bin\$(archDirectory)\$(buildConfiguration)\winrt.test.external.uap\AppPackages\winrt.test.external.uap_1.0.0.0_$(architecture)_Test\Install.ps1
  - task: VSTest@2
    displayName: Run Internal Tests
    condition:
    inputs:
      # Internal tests
      testSelector: 'testAssemblies'
      testAssemblyVer2: '**\winrt.test.internal.uap.dll'
      searchFolder: '$(Build.SourcesDirectory)\bin'
  - task: VSTest@2
    displayName: Run Managed Tests
    condition:
    inputs:
      # Managed tests
      testSelector: 'testAssemblies'
      testAssemblyVer2: '**\winrt.test.managed.uap\**\*test*.appx'
      searchFolder: '$(Build.SourcesDirectory)\bin'
  - task: VSTest@2
    displayName: Run External Tests
    condition:
    inputs:
      # External tests
      testSelector: 'testAssemblies'
      testAssemblyVer2: '**\winrt.test.external.uap\**\*test*.appx'
      searchFolder: '$(Build.SourcesDirectory)\bin'

# Publish build output 
# Copy binaries to artifact staging directory
- ${{ if eq(parameters.PublishBinaries, true) }}:
  - task: CopyFiles@2
    displayName: 'Copy Binaries to ArtifactStagingDirectory'
    inputs:
      SourceFolder: $(Build.SourcesDirectory)
      TargetFolder: $(Build.ArtifactStagingDirectory)
      Contents: |
        bin\**\Microsoft.Graphics.Canvas.pdb
        bin\**\Microsoft.Graphics.Canvas.dll
        bin\**\Microsoft.Graphics.Canvas.Interop.dll
        obj\Win2d.githash.txt
  # Copy WinMD and header files to the artifact staging directory from the x86 build to avoid duplicates
  - task: CopyFiles@2
    displayName: 'Copy WinMD and Header to ArtifactStagingDirectory'
    condition: | 
      and(succeeded(), eq(variables.architecture, 'Win32;AnyCPU') )
    inputs:
      SourceFolder: $(Build.SourcesDirectory)
      TargetFolder: $(Build.ArtifactStagingDirectory)
      Contents: |
        bin\UAPx86\*\IdlHeader\Microsoft.Graphics.Canvas.h
        bin\UAPx86\*\winrt.dll.UAP\Microsoft.Graphics.Canvas.winmd
  # Copy intellisense to the artifact staging directory from the x86 release build to avoid duplicates
  - task: CopyFiles@2
    displayName: 'Copy Intellisense to: $(Build.ArtifactStagingDirectory)'
    condition: | 
      and(succeeded(),
      and(eq(variables.architecture, 'Win32;AnyCPU'),
      eq(variables.buildConfiguration, 'Release') ))
    inputs:
      SourceFolder: $(Build.SourcesDirectory)
      TargetFolder: $(Build.ArtifactStagingDirectory)
      Contents: |
        bin\intellisense\Microsoft.Graphics.Canvas.xml
        bin\intellisense\Microsoft.Graphics.Canvas.Interop.xml